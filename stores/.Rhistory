rm(list= ls())
### install.packages("pacman")
#install.packages("pacman")
#install.packages("tidyverse")
library(pacman)
p_load(rvest, tidyverse)
## rvest scrapeo, tidyvers
banrep_url <-"https://www.banrep.gov.co/es/noticias/jdbr-decidio-unanimidad-mantener-tasa-interes-julio-2023"
banrep_htlm <- read_html(copa_mundo_url)
## revisar titulos
banrep_htlm %>%
html_elements("h1")  %>%
html_text()
## rvest scrapeo, tidyvers
banrep_url <-"https://www.banrep.gov.co/es/noticias/jdbr-decidio-unanimidad-mantener-tasa-interes-julio-2023"
banrep_htlm <- read_html(banrep_htlm)
## rvest scrapeo, tidyvers
banrep_url <-"https://www.banrep.gov.co/es/noticias/jdbr-decidio-unanimidad-mantener-tasa-interes-julio-2023"
banrep_htlm <- read_html(banrep_url)
## revisar titulos
banrep_htlm %>%
html_elements("h1")  %>%
html_text()
##revisar parrafos
xpath_parrafo <- '//*[@id="main"]/section/div'
parrafos <-banrep_htlm %>%
html_nodes(xpath = xpath_parrafo)  %>%
html_text()
parrafos
if(!require(pacman))install.packages("pacman") ; require(pacman)
require(pacman)
p_load(rio, tidyverse, ggplot2, skimr)
library(readxl)
Ecuador_Enero_Febrero <- read_excel("C:/Users/Erick/Desktop/Proceso_Analista_EConcept/Ecuador Enero Febrero.xlsx")
View(Ecuador_Enero_Febrero)
library(readxl)
Ecuador_Febrero_Marzo <- read_excel("C:/Users/Erick/Desktop/Proceso_Analista_EConcept/Ecuador Febrero Marzo.xlsx")
View(Ecuador_Febrero_Marzo)
library(readxl)
Ecuador_Marzo_Abril <- read_excel("C:/Users/Erick/Desktop/Proceso_Analista_EConcept/Ecuador Marzo Abril.xlsx")
View(Ecuador_Marzo_Abril)
library(readxl)
Ecuador_Mayo_Junio <- read_excel("C:/Users/Erick/Desktop/Proceso_Analista_EConcept/Ecuador Mayo Junio.xlsx")
View(Ecuador_Mayo_Junio)
Ecuador_Total <- rbind(Ecuador_Enero_Febrero, Ecuador_Febrero_Marzo, Ecuador_Marzo_Abril, Ecuador_Mayo_Junio)
View(Ecuador_Enero_Febrero)
# Creamos tipo de columna
Ecuador_Total <- Ecuador_Total %>%
mutate(
`TIPO PRODUCTO` = case_when(
grepl("laptop|computador de escritorio", tolower(`Descripción Comercial del Producto`)) ~ "Computadores portátiles",
grepl("tablet|ipad", tolower(`Descripción Comercial del Producto`)) ~ "Tablets",
TRUE ~ "Otros"
)
)
View(Ecuador_Febrero_Marzo)
View(Ecuador_Febrero_Marzo)
View(Ecuador_Enero_Febrero)
View(Ecuador_Febrero_Marzo)
View(Ecuador_Marzo_Abril)
View(Ecuador_Mayo_Junio)
View(Ecuador_Total)
# Creamos tipo de columna
Ecuador_Total <- Ecuador_Total %>%
mutate(
`TIPO PRODUCTO` = case_when(
grepl("LAPTOP|COMPUTADORA", tolower(`Descripción Comercial del Producto`)) ~ "Computadores portátiles",
grepl("TABLETS|IPAD", tolower(`Descripción Comercial del Producto`)) ~ "Tablets",
TRUE ~ "Otros"
)
)
# Creamos tipo de columna
Ecuador_Total <- Ecuador_Total %>%
mutate(
`TIPO PRODUCTO` = case_when(
grepl("LAPTOP|COMPUTADORA", tolower(`Descripción Comercial del Producto`)) ~ "Computadores portátiles",
grepl("TABLETS|IPAD", tolower(`Descripcion Comercial del Producto`)) ~ "Tablets",
TRUE ~ "Otros"
)
)
# Creamos tipo de columna
Ecuador_Total <- Ecuador_Total %>%
mutate(
`TIPO PRODUCTO` = case_when(
grepl("LAPTOP|COMPUTADORA", tolower(`Descripcion Comercial del Producto`)) ~ "Computadores portátiles",
grepl("TABLETS|IPAD", tolower(`Descripcion Comercial del Producto`)) ~ "Tablets",
TRUE ~ "Otros"
)
)
Ecuador_Total_filtrado <- Ecuador_Total %>%
filter(`Pais Origen` %in% "Estados Unidos", "China", "Hong Kong", "España", "México")
Ecuador_Total_filtrado <- Ecuador_Total %>%
filter(`Pais Origen` %in% "ESTADOS UNIDOS", "CHINA", "HONG KONG", "ESPAÑA", "MEXICO")
Ecuador_Total_filtrado <- Ecuador_Total %>%
filter(`Pais Origen` %in% c("ESTADOS UNIDOS", "CHINA", "HONG KONG", "ESPAÑA", "MEXICO"))
View(Ecuador_Total_filtrado)
# 1 Convertir la columna de fecha a formato de fecha
Ecuador_Total_filtrado$Fecha <- as.Date(Ecuador_Total_filtrado$Fecha)
# 1 Convertir la columna de fecha a formato de fecha
Ecuador_Total_filtrado$`Fecha aaaa-mm` <- as.Date(Ecuador_Total_filtrado$`Fecha aaaa-mm`)
# Calcular el valor de importaciones
resultados <- Ecuador_Total_filtrado %>%
group_by(`Pais Origen`, `TIPO PRODUCTO`, Mes = format(Fecha, "%Y-%m")) %>%
summarise(
Valor_FOB_Acumulado = sum(Valor_FOB),
Cantidad_Acumulada = sum(Cantidad)
)
# Calcular el valor de importaciones
resultados <- Ecuador_Total_filtrado %>%
group_by(`Pais Origen`, `TIPO PRODUCTO`, `Fecha aaaa-mm` = format(Fecha, "%Y-%m")) %>%
summarise(
Valor_FOB_Acumulado = sum(Valor_FOB),
Cantidad_Acumulada = sum(Cantidad)
)
# Calcular el valor de importaciones
resultados <- Ecuador_Total_filtrado %>%
group_by(`Pais Origen`, `TIPO PRODUCTO`, Mes = format(Fecha, "%Y-%m")) %>%
summarise(
Valor_FOB_Acumulado = sum(Valor_FOB),
Cantidad_Acumulada = sum(Cantidad)
)
# Calcular el valor de importaciones
resultados <- Ecuador_Total_filtrado %>%
group_by(`Pais Origen`, `TIPO PRODUCTO`, Mes = format(Fecha aaaa-mm, "%Y-%m")) %>%
# Calcular el valor de importaciones
resultados <- Ecuador_Total_filtrado %>%
group_by(`Pais Origen`, `TIPO PRODUCTO`, Mes = format(Fecha aaaa-mm, "%Y-%m")) %>%
# Calcular el valor de importaciones
Ecuador_Total_filtrado <- Ecuador_Total_filtrado %>%
rename(Fecha = `Fecha aaaa-mm`)
resultados <- Ecuador_Total_filtrado %>%
group_by(`Pais Origen`, `TIPO PRODUCTO`, Mes = format(Fecha, "%Y-%m")) %>%
summarise(
Valor_FOB_Acumulado = sum(Valor_FOB),
Cantidad_Acumulada = sum(Cantidad)
)
Ecuador_Total_filtrado <- Ecuador_Total_filtrado %>%
filter(!is.na(Fecha))
resultados <- Ecuador_Total_filtrado %>%
group_by(`Pais Origen`, `TIPO PRODUCTO`, Mes = format(Fecha, "%Y-%m")) %>%
summarise(
Valor_FOB_Acumulado = sum(Valor_FOB),
Cantidad_Acumulada = sum(Cantidad)
)
resultados <- Ecuador_Total_filtrado %>%
group_by(`Pais Origen`, `TIPO PRODUCTO`, Mes = format(Fecha, "%Y-%m")) %>%
summarise(
Valor_FOB_Acumulado = sum(Valor_FOB),
Cantidad_Acumulada = sum(Cantidad)
)
resultados <- Ecuador_Total_filtrado %>%
group_by(`Pais Origen`, `TIPO PRODUCTO`, Mes = format(Fecha, "%Y-%m")) %>%
summarise(
Valor_FOB_Acumulado = sum(Valor_FOB),
Cantidad_Acumulada = sum(Cantidad)
)
Ecuador_Total_filtrado$Fecha <- as.Date(Ecuador_Total_filtrado$Fecha, format = "%Y-%m")
resultados <- Ecuador_Total_filtrado %>%
group_by(`Pais Origen`, `TIPO PRODUCTO`, Mes = format(Fecha, "%Y-%m")) %>%
summarise(
Valor_FOB_Acumulado = sum(Valor_FOB),
Cantidad_Acumulada = sum(Cantidad)
)
resultados <- Ecuador_Total_filtrado %>%
group_by(`Pais Origen`, `TIPO PRODUCTO`, Fecha = format(Fecha, "%Y-%m")) %>%
summarise(
Valor_FOB_Acumulado = sum(Valor_FOB),
Cantidad_Acumulada = sum(Cantidad)
)
resultados <- Ecuador_Total_filtrado %>%
group_by(`Pais Origen`, `TIPO PRODUCTO`, Mes = format(Fecha, "%Y-%m")) %>%
summarise(
Valor_FOB_Acumulado = sum(Valor_FOB),
Cantidad_Acumulada = sum(Cantidad)
)
#Proceso Analista Económico Junior en EConcept AEI - Examen Jueves#####
###Erick Julian Villabon
# Limpiar el environment y el panel
rm(list = ls())
cat("\014")
# Cargamos los paquetes
if(!require(pacman))install.packages("pacman") ; require(pacman)
require(pacman)
p_load(rio, tidyverse, readxl, ggplot2, skimr, openxlsx)
# Cargamos las bases de datos
Ecuador_Enero_Febrero <- read_excel("C:/Users/Erick/Desktop/Proceso_Analista_EConcept/Ecuador Enero Febrero.xlsx")
Ecuador_Febrero_Marzo <- read_excel("C:/Users/Erick/Desktop/Proceso_Analista_EConcept/Ecuador Febrero Marzo.xlsx")
Ecuador_Marzo_Abril <- read_excel("C:/Users/Erick/Desktop/Proceso_Analista_EConcept/Ecuador Marzo Abril.xlsx")
Ecuador_Mayo_Junio <- read_excel("C:/Users/Erick/Desktop/Proceso_Analista_EConcept/Ecuador Mayo Junio.xlsx")
# Unimos las bases
Ecuador_Total <- rbind(Ecuador_Enero_Febrero, Ecuador_Febrero_Marzo, Ecuador_Marzo_Abril, Ecuador_Mayo_Junio)
# Creamos tipo de columna
Ecuador_Total <- Ecuador_Total %>%
mutate(
`TIPO PRODUCTO` = case_when(
grepl("LAPTOP|COMPUTADORA", tolower(`Descripcion Comercial del Producto`)) ~ "Computadores portátiles",
grepl("TABLETS|IPAD", tolower(`Descripcion Comercial del Producto`)) ~ "Tablets",
TRUE ~ "Otros"
)
)
# Seleccionar solo los países
Ecuador_Total_filtrado <- Ecuador_Total %>%
filter(`Pais Origen` %in% c("ESTADOS UNIDOS", "CHINA", "HONG KONG", "ESPAÑA", "MEXICO"))
# Calcular el valor de importaciones
Ecuador_Total_filtrado <- Ecuador_Total_filtrado %>%
rename(Fecha = `Fecha aaaa-mm`)
Ecuador_Total_filtrado <- Ecuador_Total_filtrado %>%
filter(!is.na(Fecha))
Ecuador_Total_filtrado$Fecha <- as.Date(Ecuador_Total_filtrado$Fecha, format = "%Y-%m")
#Proceso Analista Económico Junior en EConcept AEI - Examen Jueves#####
###Erick Julian Villabon
# Limpiar el environment y el panel
rm(list = ls())
cat("\014")
# Cargamos los paquetes
if(!require(pacman))install.packages("pacman") ; require(pacman)
require(pacman)
p_load(rio, tidyverse, readxl, ggplot2, skimr, openxlsx)
# Cargamos las bases de datos
Ecuador_Enero_Febrero <- read_excel("C:/Users/Erick/Desktop/Proceso_Analista_EConcept/Ecuador Enero Febrero.xlsx")
Ecuador_Febrero_Marzo <- read_excel("C:/Users/Erick/Desktop/Proceso_Analista_EConcept/Ecuador Febrero Marzo.xlsx")
Ecuador_Marzo_Abril <- read_excel("C:/Users/Erick/Desktop/Proceso_Analista_EConcept/Ecuador Marzo Abril.xlsx")
Ecuador_Mayo_Junio <- read_excel("C:/Users/Erick/Desktop/Proceso_Analista_EConcept/Ecuador Mayo Junio.xlsx")
# Unimos las bases
Ecuador_Total <- rbind(Ecuador_Enero_Febrero, Ecuador_Febrero_Marzo, Ecuador_Marzo_Abril, Ecuador_Mayo_Junio)
# Creamos tipo de columna
Ecuador_Total <- Ecuador_Total %>%
mutate(
`TIPO PRODUCTO` = case_when(
grepl("LAPTOP|COMPUTADORA", tolower(`Descripcion Comercial del Producto`)) ~ "Computadores portátiles",
grepl("TABLETS|IPAD", tolower(`Descripcion Comercial del Producto`)) ~ "Tablets",
TRUE ~ "Otros"
)
)
# Seleccionar solo los países
Ecuador_Total_filtrado <- Ecuador_Total %>%
filter(`Pais Origen` %in% c("ESTADOS UNIDOS", "CHINA", "HONG KONG", "ESPAÑA", "MEXICO"))
# Calcular el valor de importaciones
Ecuador_Total_filtrado <- Ecuador_Total_filtrado %>%
rename(Fecha = `Fecha aaaa-mm`)
Ecuador_Total_filtrado <- Ecuador_Total_filtrado %>%
filter(!is.na(Fecha))
resultados <- Ecuador_Total_filtrado %>%
group_by(`Pais Origen`, `TIPO PRODUCTO`, Mes = format(Fecha, "%Y-%m")) %>%
summarise(
Valor_FOB_Acumulado = sum(Valor_FOB),
Cantidad_Acumulada = sum(Cantidad)
)
resultados <- Ecuador_Total_filtrado %>%
group_by(`Pais Origen`, `TIPO PRODUCTO`, `Fecha`) %>%
summarise(
Valor_FOB_Acumulado = sum(Valor_FOB),
Cantidad_Acumulada = sum(Cantidad)
)
Ecuador_Total_filtrado <- Ecuador_Total_filtrado %>%
rename(Valor_FOB = `TOTAL VALOR FOB (US$)`)
Ecuador_Total_filtrado <- Ecuador_Total_filtrado %>%
rename(Valor_FOB = `TOTAL VALOR FOB (US$)`)
rm(list = ls())
library(pacman)
p_load(rvest, tidyverse, ggplot2, robotstxt, psych, stargazer, boot, openxlsx)
# 1. Actualizatr espacio de trabajo
setwd("C:/Users/Erick/Desktop/Problem_Set_2")
getwd()
list.files()
# 1. Actualizatr espacio de trabajo
setwd("C:/Users/Erick/Desktop/Problem_Set_2/stores")
getwd()
list.files()
library(readxl)
submission_template <- read_excel("submission_template.csv")
submission_template <- read.csv("C:/Users/Erick/Desktop/Problem_Set_2/stores/submission_template.csv")
View(submission_template)
summarise(submission_template$price)
summarize(submission_template$price)
test <- read.csv("C:/Users/Erick/Desktop/Problem_Set_2/stores/test.csv")
View(test)
train <- read.csv("C:/Users/Erick/Desktop/Problem_Set_2/stores/train.csv")
View(train)
#_____________________________________________________________________________#
#                                                                             #
#                      Problem Set 2: Making Money with ML?                       #
#                                                                             #
#_____________________________________________________________________________#
#   Autores: - Erick Villabon
#            -
#            -
#            -
#
#  Fecha: 22/09/2023
# - Limpiar espacio de trabajo
rm(list = ls())
# - Librerias y paquetes
library(pacman)
p_load(rvest, tidyverse, ggplot2, robotstxt, psych, stargazer, boot, openxlsx)
# 1. Actualizatr espacio de trabajo
setwd("C:/Users/Erick/Desktop/Problem_Set_2/stores")
getwd()
list.files()
# 1. Importar los Datos
submission_template <- read.csv("submission_template.csv")
test <- read.csv("test.csv")
train <- read.csv("train.csv")
View(train)
# 2. Limpieza de la base
dim(submission_template)
dim(test)
dim(train)
test %>%
count(property_type)
test %>%
summarise_all(~sum(is.na(.))) %>% transpose()
test %>%
count(rooms) %>%
test %>%
count(rooms) %>% head()
test %>%
count(rooms) %>% head()
test %>%
count(bathrooms)
test %>%
count(bedrooms) %>% head()
test %>%
count(rooms) %>% head()
#_____________________________________________________________________________#
#                                                                             #
#                      Problem Set 2: Making Money with ML?                       #
#                                                                             #
#_____________________________________________________________________________#
#   Autores: - Erick Villabon
#            -
#            -
#            -
#
#  Fecha: 22/09/2023
# - Limpiar espacio de trabajo
rm(list = ls())
# - Librerias y paquetes
library(pacman)
p_load(rvest, tidyverse, ggplot2, robotstxt, psych, stargazer, boot, openxlsx)
# 1. Actualizatr espacio de trabajo
setwd("C:/Users/Erick/Desktop/Problem_Set_2/stores")
getwd()
list.files()
# 1. Importar los Datos
submission_template <- read.csv("submission_template.csv")
test <- read.csv("test.csv")
train <- read.csv("train.csv")
# 2. Limpieza de la base
dim(submission_template)
dim(test)
dim(train)
test %>%
count(property_type)
test %>%
summarise_all(~sum(is.na(.))) %>% transpose()
#vamos a imputar la mediana a los valores faltantes de habitación y baños
test %>%
count(rooms) %>% head()
test %>%
count(bathrooms)
test %>%
count(surface_total) %>% head()
test %>%
count(rooms) %>% head()
# Calcular la mediana
mediana_sup_cubierta <- median(test$surface_covered, na.rm = TRUE)
mediana_sup_total<- median(test$surface_total, na.rm = TRUE)
# Calcular la mediana
median(test$rooms)
median(test$bathrooms)
mediana_sup_cubierta <- median(test$surface_covered, na.rm = TRUE)
mediana_sup_total<- median(test$surface_total, na.rm = TRUE)
# Imputar datos faltantes
db <- db %>%
mutate(rooms = replace_na(rooms, 3),
bathrooms = replace_na(bathrooms, 2),
surface_covered = replace_na(surface_covered, mediana_sup_cubierta),
surface_total = replace_na(surface_total, mediana_sup_total),)
# Imputar datos faltantes
test <- test %>%
mutate(rooms = replace_na(rooms, 3),
bathrooms = replace_na(bathrooms, 2),
surface_covered = replace_na(surface_covered, mediana_sup_cubierta),
surface_total = replace_na(surface_total, mediana_sup_total),)
summary(db$price) %>%
as.matrix() %>%
as.data.frame() %>%
mutate(V1 = scales::dollar(V1))
summary(test$price) %>%
as.matrix() %>%
as.data.frame() %>%
mutate(V1 = scales::dollar(V1))
summary(test$price) %>%
as.matrix() %>%
as.data.frame() %>%
mutate(V1 = scales::dollar(V1))
summary(submission_template$price) %>%
as.matrix() %>%
as.data.frame() %>%
mutate(V1 = scales::dollar(V1))
test <- test %>%
mutate(price = replace_na(price,submission_template$price))
test_data <- left_join(test, submission_template,by"property_id")
test_data <- left_join(test, submission_template,by = "property_id")
test_data <- test_data %>%
mutate(price = ifelse(is.na(price), price.y, price))
View(test_data)
test_data$price.x<-NULL
test_data<-test_data %>%
rename(price.y=price)
test_data<-test_data %>%
rename(price.y=price)
test_data <- test_data %>%
rename(price.y = price)
test_data <- test_data %>%
rename(price = price.y)
#ver la distribución de los precios de los immuebles
summary(test_data$price) %>%
as.matrix() %>%
as.data.frame() %>%
mutate(V1 = scales::dollar(V1))
#calculamos valor del metro cuadrado
test_data <- db %>%
mutate(precio_por_mt2 = round(price / surface_total, 0))
#calculamos valor del metro cuadrado
test_data <- test_data %>%
mutate(precio_por_mt2 = round(price / surface_total, 0))
summary(test_data$precio_por_mt2) %>%
as.matrix() %>%
as.data.frame() %>%
mutate(V1 = scales::dollar(V1))
# Visualicemos la distribución de nuestra variable de interés
p <- ggplot(db, aes(x = price)) +
geom_histogram(fill = "darkblue", alpha = 0.4) +
labs(x = "Valor de venta (log-scale)", y = "Cantidad") +
scale_x_log10(labels = scales::dollar) +
theme_bw()
# Visualicemos la distribución de nuestra variable de interés
p <- ggplot(test_data, aes(x = price)) +
geom_histogram(fill = "darkblue", alpha = 0.4) +
labs(x = "Valor de venta (log-scale)", y = "Cantidad") +
scale_x_log10(labels = scales::dollar) +
theme_bw()
ggplotly(p)
# Visualicemos la distribución de nuestra variable de interés
p <- ggplot(test_data, aes(x = price)) +
geom_histogram(fill = "darkblue", alpha = 0.4) +
labs(x = "Valor de venta (log-scale)", y = "Cantidad") +
scale_x_log10(labels = scales::dollar) +
theme_bw()
ggplotl(p)
y
ggplotly(p)
ggplotly(p)
library(pacman)
p_load(rvest, tidyverse, ggplot2, robotstxt, psych, stargazer, boot, plotly, openxlsx)
# Visualicemos la distribución de nuestra variable de interés
p <- ggplot(test_data, aes(x = price)) +
geom_histogram(fill = "darkblue", alpha = 0.4) +
labs(x = "Valor de venta (log-scale)", y = "Cantidad") +
scale_x_log10(labels = scales::dollar) +
theme_bw()
ggplotly(p)
#Filtramos ese outlier que resulta no ser real
test_data <- test_data %>%
filter(between(precio_por_mt2, 100000,  60e6))
# Visualicemos la distribución de nuestra variable de interés
p <- ggplot(test_data, aes(x = price)) +
geom_histogram(fill = "darkblue", alpha = 0.4) +
labs(x = "Valor de venta (log-scale)", y = "Cantidad") +
scale_x_log10(labels = scales::dollar) +
theme_bw()
ggplotly(p)
#Filtramos ese outlier que resulta no ser real
test_data <- test_data %>%
filter(between(precio_por_mt2, 100000,  30e6))
# Visualicemos la distribución de nuestra variable de interés
p <- ggplot(test_data, aes(x = price)) +
geom_histogram(fill = "darkblue", alpha = 0.4) +
labs(x = "Valor de venta (log-scale)", y = "Cantidad") +
scale_x_log10(labels = scales::dollar) +
theme_bw()
ggplotly(p)
#Filtramos ese outlier que resulta no ser real
test_data <- test_data %>%
filter(between(precio_por_mt2, 10000,  3e6))
# Visualicemos la distribución de nuestra variable de interés
p <- ggplot(test_data, aes(x = price)) +
geom_histogram(fill = "darkblue", alpha = 0.4) +
labs(x = "Valor de venta (log-scale)", y = "Cantidad") +
scale_x_log10(labels = scales::dollar) +
theme_bw()
ggplotly(p)
# Visualicemos la distribución de nuestra variable de interés
p <- ggplot(test_data, aes(x = price)) +
geom_histogram(fill = "darkblue", alpha = 0.4) +
labs(x = "Valor de venta (log-scale)", y = "Cantidad") +
scale_x_log10(labels = scales::dollar) +
theme_bw()
ggplotly(p)
View(test_data)
